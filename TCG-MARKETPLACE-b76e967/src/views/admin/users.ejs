<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: #1A1D24;
        color: #F0F2F5;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
    }

    .admin-header {
        background-color: #242833;
        border-bottom: 1px solid #3C4150;
        color: var(--text-primary);
        padding: 15px 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .admin-header h1 {
        margin: 0;
        font-size: 1.8rem;
        color: #F0F2F5;
    }

    /* Logout button styling */
    .admin-header .logout-btn {
        background-color: var(--accent-primary);
        border: none;
        color: white;
        padding: 8px 15px;
        border-radius: 6px;
        cursor: pointer;
        text-decoration: none; /* Ensure it looks like a button */
        transition: background-color 0.2s;
    }
    .admin-header .logout-btn:hover {
        background-color: var(--accent-hover);
    }

    .admin-wrapper {
        display: flex;
        flex: 1;
    }

    .admin-sidebar {
        width: 250px;
        background-color: var(--bg-surface);
        border-right: 1px solid var(--border);
        color: var(--text-secondary);
        padding: 20px;
        flex-shrink: 0;
    }

    .admin-sidebar nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .admin-sidebar nav li {
        margin-bottom: 10px;
    }

    .admin-sidebar nav a {
        color: var(--text-secondary);
        text-decoration: none;
        display: block;
        padding: 10px 15px;
        border-radius: 6px;
        transition: background-color 0.2s, color 0.2s;
    }

    .admin-sidebar nav a:hover {
        background-color: var(--bg-surface-2);
        color: var(--text-primary);
    }

    .admin-sidebar nav a.active {
        background-color: var(--accent-primary);
        color: white;
    }

    .admin-content {
        flex-grow: 1;
        padding: 20px;
    }

    /* Dashboard Cards Styling */
    .card {
        background-color: var(--bg-surface);
        border: 1px solid var(--border);
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        margin-bottom: 20px;
        color: var(--text-primary);
    }

    .card-header {
        background-color: var(--bg-surface-2);
        border-bottom: 1px solid var(--border);
        padding: 15px;
        font-weight: 700;
        font-size: 1.1rem;
    }

    .card-body {
        padding: 20px;
    }

    .card-title {
        font-size: 2.5rem;
        font-weight: 900;
        margin-bottom: 10px;
        color: var(--accent-primary); /* Highlight key figures */
    }

    .card-text {
        color: var(--text-secondary);
    }

    /* Form elements styling */
    .admin-form .form-group {
        margin-bottom: 1rem;
    }

    .admin-form label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
    }

    .admin-form .form-control {
        width: 100%;
        padding: 0.75rem;
        background-color: var(--bg-surface-2);
        border: 1px solid var(--border);
        border-radius: 4px;
        color: var(--text-primary);
        font-size: 1rem;
    }

    .admin-form .form-control:focus {
        outline: none;
        border-color: var(--accent-primary);
        box-shadow: 0 0 0 2px rgba(129, 92, 246, 0.2);
    }

    .admin-form .btn-primary {
        background-color: var(--accent-primary);
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 700;
        transition: background-color 0.2s;
    }

    .admin-form .btn-primary:hover {
        background-color: var(--accent-hover);
    }

    /* Alert / Message Styling */
    .alert {
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #28a74533; /* Green with transparency */
        color: #28a745; /* Green text */
        border-color: #28a745;
    }

    .alert-danger,
    .alert-error {
        background-color: #dc354533; /* Red with transparency */
        color: #dc3545; /* Red text */
        border-color: #dc3545;
    }

    /* Overrides for Bootstrap-like classes to fit theme if Bootstrap is not fully loaded */
    .container {
        width: 90%;
        max-width: 1200px;
        margin: 0 auto;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin-right: -15px;
        margin-left: -15px;
    }

    .col-md-4, .col-md-6 {
        position: relative;
        width: 100%;
        padding-right: 15px;
        padding-left: 15px;
    }

    @media (min-width: 768px) {
        .col-md-4 {
            flex: 0 0 33.333333%;
            max-width: 33.333333%;
        }
        .col-md-6 {
            flex: 0 0 50%;
            max-width: 50%;
        }
    }

    .mt-4 {
        margin-top: 1.5rem !important;
    }

    .mb-3 {
        margin-bottom: 1rem !important;
    }

    .text-white {
        color: var(--text-primary) !important;
    }

    .bg-primary {
        background-color: var(--accent-primary) !important;
    }

    .bg-success {
        background-color: #28a745 !important; /* Example strong green, can be variable */
    }

    .bg-info {
        background-color: #17a2b8 !important; /* Example strong info blue, can be variable */
    }
</style>
<div class="container mt-4">
    <h2>Manage Users</h2>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Account Type</th>
                <th>Current Fee (%)</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <% users.forEach(user => { %>
                <tr>
                    <td><%= user.username %></td>
                    <td><%= user.email %></td>
                    <td><%= user.accountType %></td>
                    <td>
                        <% if (user.fee_override_percentage !== null) { %>
                            <%= user.fee_override_percentage %> (Override)
                        <% } else { %>
                            <%= defaultFees[user.accountType] || 0 %> (Default)
                        <% } %>
                    </td>
                    <td>
                        <form class="set-fee-form" data-user-id="<%= user._id %>">
                            <div class="input-group">
                                <input type="number" step="0.01" class="form-control form-control-sm" placeholder="New Fee %" value="<%= user.fee_override_percentage !== null ? user.fee_override_percentage : '' %>">
                                <button type="submit" class="btn btn-sm btn-primary">Set</button>
                                <% if (user.fee_override_percentage !== null) { %>
                                    <button type="button" class="btn btn-sm btn-outline-secondary reset-fee-btn">Reset</button>
                                <% } %>
                            </div>
                        </form>
                    </td>
                </tr>
            <% }) %>
        </tbody>
    </table>
</div>

<script>
    document.querySelectorAll('.set-fee-form').forEach(form => {
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const userId = form.dataset.userId;
            const input = form.querySelector('input[type="number"]');
            const newFee = input.value.trim();

            try {
                const res = await fetch(`/admin/users/${userId}/set-fee`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ fee_override_percentage: newFee === '' ? 'null' : newFee }),
                });
                const data = await res.json();
                if (data.success) {
                    alert('Fee updated successfully!');
                    location.reload();
                } else {
                    alert('Error: ' + (data.message || 'Could not update fee.'));
                }
            } catch (error) {
                console.error('Error setting fee:', error);
                alert('An error occurred while updating the fee.');
            }
        });

        const resetBtn = form.querySelector('.reset-fee-btn');
        if (resetBtn) {
            resetBtn.addEventListener('click', async () => {
                const userId = form.dataset.userId;
                if (confirm('Are you sure you want to reset this user's fee to default?')) {
                    try {
                        const res = await fetch(`/admin/users/${userId}/set-fee`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ fee_override_percentage: 'null' }),
                        });
                        const data = await res.json();
                        if (data.success) {
                            alert('Fee reset successfully!');
                            location.reload();
                        } else {
                            alert('Error: ' + (data.message || 'Could not reset fee.'));
                        }
                    } catch (error) {
                        console.error('Error resetting fee:', error);
                        alert('An error occurred while resetting the fee.');
                    }
                }
            });
        }
    });
</script>
